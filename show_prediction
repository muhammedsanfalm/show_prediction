import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten
from tensorflow.keras.utils import to_categorical


# 1. Load the MNIST dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data()


# 2. Preprocess the data
X_train = X_train.reshape(-1, 28, 28, 1).astype('float32') / 255
X_test = X_test.reshape(-1, 28, 28, 1).astype('float32') / 255
y_train_cat = to_categorical(y_train, 10)
y_test_cat = to_categorical(y_test, 10)


# 3. Create the model
model = Sequential([ Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(28,28,1)), MaxPooling2D(pool_size=(2,2)), Conv2D(64, kernel_size=(3,3), activation='relu'), MaxPooling2D(pool_size=(2,2)), Flatten(), Dense(128, activation='relu'), Dense(10, activation='softmax') ])


# 4. Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])


# 5. Train the model
model.fit(X_train, y_train_cat, validation_data=(X_test, y_test_cat), epochs=5, batch_size=128)


# 6. Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test_cat)
print(f"\nTest Accuracy: {accuracy*100:.2f}%")


# 7. Make predictions and show results
predictions = model.predict(X_test)

def show_prediction(index):
    plt.imshow(X_test[index].reshape(28, 28),
cmap='gray')
    plt.title(f"""Actual: {y_test[index]}
Predicted: {np.argmax(predictions[index])}""")
    plt.axis('off')
    plt.show()
# Example usage
for i in range(5):
    show_prediction(i)
